# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/centos9s"
  config.vm.disk :disk, size: "40GB", primary: true

  config.vm.network:private_network, ip: "192.168.20.11"
  config.vm.network:forwarded_port, guest: 80, host: 8070, auto_correct: true
  config.vm.usable_port_range = (8000..9000)

  config.vm.network "public_network"

  config.vm.provider "vmware_desktop" do |vm|
    # Display the VirtualBox GUI when booting the machine
    #vm.gui = true
  
    # Customize the amount of memory on the VM:
    vm.memory = "1024"
    vm.cpus = 1
  end

  config.vm.provision :shell, path: "./provision.sh"

  config.trigger.after [:up, :reload] do |trigger|
    trigger.run_remote = {inline: <<-SHELL
    SELINUX_STATUS=$(getenforce)
    if id 'app-server' &> /dev/null; then
      echo 'User app-server already exists'
    else
      sudo hostnamectl set-hostname harrison.chen && \
      sudo groupadd -f app-server && useradd -m -g app-server -s /bin/bash app-server && usermod -aG wheel app-server && \
      echo "app-server:0000" | sudo chpasswd && \
      echo 'app-server ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/app-server && sudo chmod 0440 /etc/sudoers.d/app-server
    fi
    sudo firewall-cmd --permanent --add-service=http
    sudo firewall-cmd --reload
    if [ "$SELINUX_STATUS" == "Enforcing" ]; then
        echo "SELinux is Enforcing. Switching to Permissive mode."
        sudo setenforce 0
    elif [ "$SELINUX_STATUS" == "Permissive" ]; then
        echo "SELinux is already in Permissive mode."
    elif [ "$SELINUX_STATUS" == "Disabled" ]; then
        echo "SELinux is Disabled."
    else
        echo "Unknown SELinux status: $SELINUX_STATUS"
    fi
    SHELL
    }
  end
  #config.ssh.username = "app-server"
   
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./data", "/home/synced_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
